// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteContainerBynameHandlerFunc turns a function with the right signature into a delete container byname handler
type DeleteContainerBynameHandlerFunc func(DeleteContainerBynameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteContainerBynameHandlerFunc) Handle(params DeleteContainerBynameParams) middleware.Responder {
	return fn(params)
}

// DeleteContainerBynameHandler interface for that can handle valid delete container byname params
type DeleteContainerBynameHandler interface {
	Handle(DeleteContainerBynameParams) middleware.Responder
}

// NewDeleteContainerByname creates a new http.Handler for the delete container byname operation
func NewDeleteContainerByname(ctx *middleware.Context, handler DeleteContainerBynameHandler) *DeleteContainerByname {
	return &DeleteContainerByname{Context: ctx, Handler: handler}
}

/*DeleteContainerByname swagger:route DELETE /container/byname/{name} containers deleteContainerByname

Delete a container defition.
This will stop running containers.


*/
type DeleteContainerByname struct {
	Context *middleware.Context
	Handler DeleteContainerBynameHandler
}

func (o *DeleteContainerByname) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteContainerBynameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
