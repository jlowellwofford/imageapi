// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetContainerBynameHandlerFunc turns a function with the right signature into a get container byname handler
type GetContainerBynameHandlerFunc func(GetContainerBynameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetContainerBynameHandlerFunc) Handle(params GetContainerBynameParams) middleware.Responder {
	return fn(params)
}

// GetContainerBynameHandler interface for that can handle valid get container byname params
type GetContainerBynameHandler interface {
	Handle(GetContainerBynameParams) middleware.Responder
}

// NewGetContainerByname creates a new http.Handler for the get container byname operation
func NewGetContainerByname(ctx *middleware.Context, handler GetContainerBynameHandler) *GetContainerByname {
	return &GetContainerByname{Context: ctx, Handler: handler}
}

/*GetContainerByname swagger:route GET /container/byname/{name} containers getContainerByname

Get a container definition

*/
type GetContainerByname struct {
	Context *middleware.Context
	Handler GetContainerBynameHandler
}

func (o *GetContainerByname) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetContainerBynameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
