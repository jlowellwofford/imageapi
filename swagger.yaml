---
swagger: "2.0"
consumes:
- application/json
info:
  description: |
    This API specification describes a service for attaching, mounting and preparing container images and manipulating those containers.

    In general, higher level objects can either reference lower level objects (e.g. a mount referencing an attachment point) by a reference ID, 
    or, they can contain the full specification of those lower objects.

    If an object references another by ID, deletion of that object does not effect the underlying object.
    
    If an object defines a lower level object, that lower level object will automatically be deleted on deletion of the higher level object.

    For instance, if a container contains all of the defintions for all mount points and attachments, deletion of the container will automatically unmount
    and detach those lower objects.
  title: Image API
  version: 1.0.0
produces:
- application/json
schemes:
- http
- https
basePath: /imageapi/v1

definitions:
  id:
    description: |
      An ID is a unique numeric ID that references an object.  
      IDs are not necessarily unique across object types.
      IDs are generall readOnly and generated internally.
    type: integer
    format: int64

  name:
    description: |
      A name is a unique, user-provided identifier for an object.

      A name must consist of numbers, letters, and the symbols in the set { `.`, `-`, `_`}.
    type: string
    pattern: "^[A-Za-z0-1.-_]*$"

  rbd_options:
    type: object
    properties:
      fsid:
        type: string
      ip:
        type: string
        format: ipv4
        pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
      share:
        type: boolean
      noshare:
        type: boolean
      crc:
        type: boolean
      nocrc:
        type: boolean
      ceph_requires_signatures:
        type: boolean
      noceph_requires_signatures:
        type: boolean
      tcp_nodelay:
        type: boolean
      notcp_nodelay:
        type: boolean
      cephx_sign_messages:
        type: boolean
      nocephx_sign_messages:
        type: boolean
      mount_timeout:
        type: integer
      osdkeepalive:
        type: integer
      osd_idle_ttl:
        type: integer
      force:
        type: boolean
      rw:
        type: boolean
      ro:
        type: boolean
      queue_depth:
        type: integer
      lock_on_read:
        type: boolean
      exclusive:
        type: boolean
      lock_timeout:
        type: integer
        format: int64
      notrim:
        type: boolean
      abort_on_full:
        type: boolean
      alloc_size:
        type: integer
      name:
        type: string
      secret:
        type: string
      namespace:
        type: string

  rbd:
    description: |
      rbd describes an RBD map.  To successfully map, at least one monitor, pool and image must be specified.
      Additionally, you will need options.name and options.secret specified.
    type: object
    required:
      - monitors
      - pool
      - image
    properties:
      id:
        $ref: "#/definitions/id"
      device_id:
        description: The dev_id is the device ID in the rbd subsystem.
        type: integer
        format: int64
        readOnly: true
      device_file:
        description: The device_file is the path to the system device file.
        type: string
        readOnly: true
      refs:
        type: integer
        format: int64
        readOnly: true
      #external 
      monitors:
        type: array
        items:
          type: string
          format: ipv4
          pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
      pool:
        type: string
        minLength: 1
      image:
        type: string
        minLength: 1
      snapshot:
        type: string
      options:
        $ref: "#/definitions/rbd_options"
      
  mount_rbd:
    description: |
      mount_rbd describes an RBD mount.  This must have at least and RBD ID associated with it
      (which becomes the mount's ID), and a provided filesystem type.
      
      Either `rbd_id` or `rbd` must be specified.  If both are specified, `rbd` will be ignored.

      If `rbd` is specified and `rbd_id` is omitted, the RBD will first be attached, and will be
      detached on deletion.
    required:
      - fs_type
    properties:
      id: 
        $ref: "#/definitions/id"
        readOnly: true
      mountpoint:
        type: string
        readOnly: true
      refs:
        type: integer
        format: int64
        readOnly: true
      # external
      rbd_id:
        $ref: "#/definitions/id"
      rbd:
        $ref: "#/definitions/rbd"
      fs_type:
        type: string
      mount_options:
        type: array
        items:
          type: string

  mount_overlay:
    description: |
      `mount_overlay` describes an Overlayfs mount.  All mount points must be RBD ID's.
      At very least, `lower` must be specified.  If `upper` length is zero, no `upper`
      mounts will be used.  `workdir` will be assigned automatically.

      If the mounts specified in `lower` are specifications and not ID references, they
      will be recursively mounted/attached.

      Overlay mounts are identified by their uppermost `lower` ID.
    type: object
    required:
      - lower
    properties:
      # internal
      id:
        $ref: "#/definitions/id"
        readOnly: true
      mountpoint:
        type: string
        readOnly: true
      workdir:
        type: string
        readOnly: true
      upperdir:
        description:  currently, upperdir is always a directory in mountDir
        type: string
        readOnly: true
      refs:
        type: integer
        format: int64
        readOnly: true
      # external
      lower:
        description: This is an array of mount specifications to be used (in order) as lower mounts for the overlay.
        type: array
        items:
          $ref: "#/definitions/mount"

  mount:
    description: |
      Generically address mounts by kind and ID or definition
      Either an `mount_id` or a mount definition must be supplied.
      If both are supplied, the mount definition will be ignored.
      If `mount_id` is specified, then the kind/id will be used to reference that mount.
      If no `mount_id` is supplied a defition of type `kind` must be present.
    type: object
    required:
      - kind
    properties:
      mount_id:
        $ref: "#/definitions/id"
      kind:
        type: string
        enum: [ "overlay", "rbd" ]
      rbd:
        $ref: "#/definitions/mount_rbd"
      overlay:
        $ref: "#/definitions/mount_overlay"


  container_namespace:
    description: Linux namespace
    type: string
    enum: [ "cgroup", "ipc", "net", "mnt", "pid", "time", "user", "uts" ]

  container_state:
    description: Valid container states
    type: string
    # stolen straight from docker (even if we don't use them all)
    enum: [ "created",  "running", "stopping", "exited", "dead" ]

  container:
    description: |
      The `container` option describes a minimally namespaced container.

      A container is identified by a service-provided unique numeric `pid`.

      Optionally, a container can be provided with a `name`.  The name must
      be unique.  Containers can be referenced by `name` if provided.
    type: object
    required:
      - mount
      - command
    properties:
      # internal
      id:
        $ref: "#/definitions/id"
      logfile:
        type: string
        readOnly: true
      # external
      name:
        description: name is an optional identifier for the container.  Name must be unique.
        $ref: "#/definitions/name"
      mount:
        $ref: "#/definitions/mount"
      command:
        type: string
      systemd:
        type: boolean
        description: >
          When `systemd` is set to `true`, we will assume that this container will run `systemd`,
          and perform the necessary magic dance to make systemd run inside of the container.
          The default is `false`.
      state:
        description: >
          When read, this contains the current container state.
          On creation, this requests the initial state (valid options: `created` or `running`).
          The default is `created`.
        $ref: "#/definitions/container_state"
      namespaces:
        description: |
          A list of Linux namespaces to use.

          Note: This is currently unused.  All containers currently get `mnt` and `pid`.
                It's here as a placeholder for future use.
        type: array
        items:
          $ref: "#/definitions/container_namespace"
  
  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string

  
paths:

  /attach/rbd:
    # get a list of rbds
    get:
      tags:
        - attach
      operationId: list_rbds
      responses:
        200:
          description: list of rbd maps
          schema:
            type: array
            items:
              $ref: "#/definitions/rbd"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
        - attach
      operationId: map_rbd
      parameters:
        - name: rbd
          in: body
          required: true
          schema:
            $ref: "#/definitions/rbd"
      responses:
        201:
          description: RBD attach succeed
          schema:
            $ref: "#/definitions/rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /attach/rbd/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - attach
      operationId: get_rbd
      responses:
        200:
          description: RBD entry
          schema:
            $ref: "#/definitions/rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
        - attach
      operationId: unmap_rbd
      responses:
        200:
          description: Unmapped
          schema:
            $ref: "#/definitions/rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  
  /mount:
    get:
      description: List mounts
      tags:
        - mounts
      operationId: list_mounts
      responses:
        200:
          description: list all mounts
          schema:
            type: array
            items:
              $ref: "#/definitions/mount"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
    
    post:
      description: Create a new mount by mount specification.
      tags:
        - mounts
      operationId: mount
      parameters:
        - name: mount
          in: body
          required: true
          schema:
            $ref: "#/definitions/mount"
      responses:
        201:
          description: mount succeed
          schema:
            $ref: "#/definitions/mount"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
    
    delete:
      description: Unmount a specified mount.  Note that mount reference IDs must be specified.
      tags:
        - mounts
      parameters:
        - name: mount
          in: body
          required: true
          schema:
            $ref: "#/definitions/mount"
      responses:
        200:
          description: Unmount succeeded
          schema:
            $ref: "#/definitions/mount"
        default:
          description: Unmount failed
          schema:
            $ref: "#/definitions/error"
    
  /mount/rbd:

    get:
      tags:
        - mounts
      operationId: list_mounts_rbd
      responses:
        200:
          description: list of rbd mounts
          schema:
            type: array
            items:
              $ref: "#/definitions/mount_rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - mounts
      operationId: mount_rbd
      parameters:
        - name: mount
          in: body
          required: true
          schema:
            $ref: "#/definitions/mount_rbd"
      responses:
        201:
          description: RBD mount succeed
          schema:
            $ref: "#/definitions/mount_rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /mount/rbd/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - mounts
      operationId: get_mount_rbd
      responses:
        200:
          description: RBD mount entry
          schema:
            $ref: "#/definitions/mount_rbd"
        default: 
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
        - mounts
      operationId: unmount_rbd
      responses:
        200:
          description: Unmounted
          schema:
            $ref: "#/definitions/mount_rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  
  /mount/overlay:

    get:
      tags:
        - mounts
      operationId: list_mounts_overlay
      responses:
        200:
          description: list of overlay mounts
          schema:
            type: array
            items:
              $ref: "#/definitions/mount_overlay"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - mounts
      operationId: mount_overlay
      parameters:
        - name: mount
          in: body
          required: true
          schema:
            $ref: "#/definitions/mount_overlay"
      responses:
        201:
          description: Overlay mount succeed
          schema:
            $ref: "#/definitions/mount_overlay"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /mount/overlay/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - mounts
      operationId: get_mount_overlay
      responses:
        200:
          description: Overlay mount entry
          schema:
            $ref: "#/definitions/mount_overlay"
        default: 
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
        - mounts
      operationId: unmount_overlay
      responses:
        200:
          description: Unmounted
          schema:
            $ref: "#/definitions/mount_overlay"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  
  /container:
    get:
      tags:
        - containers
      description: Get a list of containers
      operationId: list_containers
      responses:
        200:
          description: List of containers
          schema:
            type: array
            items:
              $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - containers
      description: Create a container
      operationId: create_container
      parameters:
        - name: container
          in: body
          required: true
          schema:
            $ref: "#/definitions/container"
      responses:
        201:
          description: Container creation succeed
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /container/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true

    get:
      tags:
        - containers
      description: Get a container definition
      operationId: get_container
      responses:
        200:
          description: Container entry
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    delete:
      tags:
        - containers
      description: |
        Delete a container defition.  
        This will stop running containers.
      operationId: delete_container
      responses:
        200:
          description: Container deleted
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /container/{id}/{state}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
      - type: string
        enum: [ "running", "exited" ]
        in: path
        name: state
        required: true

    get:
      tags:
        - containers
      description: |
        Request a (valid) state for a container. 
        Valid states to request include: `running`, `exited`, `paused` (paused is not yet implemented)
      operationId: set_container_state
      responses:
        200:
          description: Container state changed
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /container/byname/{name}:
    parameters:
      - type: string
        pattern: '^[a-zA-Z0-9._-]*$'
        name: name
        in: path
        required: true

    get:
      tags:
        - containers
      description: Get a container definition
      operationId: get_container_byname
      responses:
        200:
          description: Container entry
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    delete:
      tags:
        - containers
      description: |
        Delete a container defition.  
        This will stop running containers.
      operationId: delete_container_byname
      responses:
        200:
          description: Container deleted
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref:  "#/definitions/error"

  /container/byname/{name}/{state}:
    parameters:
      - type: string
        pattern: '^[a-zA-Z0-9._-]*$'
        name: name
        in: path
        required: true
      - type: string
        enum: [ "running", "exited" ]
        in: path
        name: state
        required: true

    get:
      tags:
        - containers
      description: |
        Request a (valid) state for a container. 
        Valid states to request include: `running`, `exited`, `paused` (paused is not yet implemented)
      operationId: set_container_state_byname
      responses:
        200:
          description: Container state changed
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"